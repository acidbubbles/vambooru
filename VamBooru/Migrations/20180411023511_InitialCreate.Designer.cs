// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VamBooru.Models;

namespace VamBooru.Migrations
{
    [DbContext(typeof(VamBooruDbContext))]
    [Migration("20180411023511_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VamBooru.Models.OAuth2Login", b =>
                {
                    b.Property<string>("Scheme");

                    b.Property<string>("Username");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Scheme", "Username");

                    b.HasIndex("UserId");

                    b.ToTable("OAuth2Logins");
                });

            modelBuilder.Entity("VamBooru.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset>("DatePublished");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("Published");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("VamBooru.Models.PostTag", b =>
                {
                    b.Property<Guid>("PostId");

                    b.Property<Guid>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("VamBooru.Models.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FilenameWithoutExtension");

                    b.Property<Guid?>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("VamBooru.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("VamBooru.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateSubscribed");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VamBooru.Models.OAuth2Login", b =>
                {
                    b.HasOne("VamBooru.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("VamBooru.Models.Post", b =>
                {
                    b.HasOne("VamBooru.Models.User", "Author")
                        .WithMany("Scenes")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("VamBooru.Models.PostTag", b =>
                {
                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VamBooru.Models.Tag", "Tag")
                        .WithMany("Scenes")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.Scene", b =>
                {
                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("Scenes")
                        .HasForeignKey("PostId");
                });
#pragma warning restore 612, 618
        }
    }
}
