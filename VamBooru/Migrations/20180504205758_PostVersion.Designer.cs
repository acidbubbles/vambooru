// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VamBooru.Models;

namespace VamBooru.Migrations
{
    [DbContext(typeof(VamBooruDbContext))]
    [Migration("20180504205758_PostVersion")]
    partial class PostVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("VamBooru.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DatePublished");

                    b.Property<bool>("Published");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrn");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Version");

                    b.Property<int>("Votes");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DateCreated");

                    b.HasIndex("DatePublished");

                    b.HasIndex("Votes");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("VamBooru.Models.PostComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<Guid>("PostId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DateCreated");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("VamBooru.Models.PostFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Compressed");

                    b.Property<string>("Filename")
                        .IsRequired();

                    b.Property<string>("MimeType")
                        .IsRequired();

                    b.Property<Guid>("PostId");

                    b.Property<string>("Urn")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("Urn")
                        .IsUnique();

                    b.ToTable("PostFiles");
                });

            modelBuilder.Entity("VamBooru.Models.PostTag", b =>
                {
                    b.Property<Guid>("PostId");

                    b.Property<Guid>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("VamBooru.Models.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PostId");

                    b.Property<string>("ThumbnailUrn");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("VamBooru.Models.StorageFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("StorageFiles");
                });

            modelBuilder.Entity("VamBooru.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PostsCount");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PostsCount");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("VamBooru.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateSubscribed");

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VamBooru.Models.UserLogin", b =>
                {
                    b.Property<string>("Scheme");

                    b.Property<string>("NameIdentifier");

                    b.Property<Guid>("UserId");

                    b.HasKey("Scheme", "NameIdentifier");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("VamBooru.Models.UserPostVote", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("PostId");

                    b.Property<int>("Votes");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserPostVotes");
                });

            modelBuilder.Entity("VamBooru.Models.Post", b =>
                {
                    b.HasOne("VamBooru.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.PostComment", b =>
                {
                    b.HasOne("VamBooru.Models.User", "Author")
                        .WithMany("PostComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.PostFile", b =>
                {
                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("PostFiles")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.PostTag", b =>
                {
                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VamBooru.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.Scene", b =>
                {
                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("Scenes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.UserLogin", b =>
                {
                    b.HasOne("VamBooru.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VamBooru.Models.UserPostVote", b =>
                {
                    b.HasOne("VamBooru.Models.Post", "Post")
                        .WithMany("UserVotes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VamBooru.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
